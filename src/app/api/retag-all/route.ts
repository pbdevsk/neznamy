import { NextRequest, NextResponse } from 'next/server';
import { pool } from '@/lib/db';
import { generateTags } from '@/lib/normalize';

export async function POST(request: NextRequest) {
  try {
    const client = await pool.connect();
    
    try {
      console.log('üöÄ Zaƒç√≠nam pretagovanie v≈°etk√Ωch z√°znamov...');
      
      // 1. Vymazanie star√Ωch tagov (okrem manu√°lnych)
      await client.query('DELETE FROM owner_tags WHERE id NOT IN (SELECT id FROM manual_tags)');
      console.log('‚úÖ Star√© automatick√© tagy vymazan√©');
      
      // 2. Naƒç√≠tanie v≈°etk√Ωch vlastn√≠kov
      const ownersResult = await client.query(
        'SELECT id, meno_raw FROM owners ORDER BY id'
      );
      
      const owners = ownersResult.rows;
      console.log(`üìä Na≈°iel som ${owners.length} vlastn√≠kov na spracovanie`);
      
      let processedCount = 0;
      let newTagsCount = 0;
      const batchSize = 1000;
      
      // 3. Spracovanie v d√°vk√°ch
      for (let i = 0; i < owners.length; i += batchSize) {
        const batch = owners.slice(i, i + batchSize);
        
        // Generovanie tagov pre d√°vku
        const tagsToInsert: Array<{owner_id: number, key: string, value: string, uncertain: boolean}> = [];
        
        batch.forEach(owner => {
          const generatedTags = generateTags(owner.meno_raw);
          generatedTags.forEach(tag => {
            tagsToInsert.push({
              owner_id: owner.id,
              key: tag.key,
              value: tag.value,
              uncertain: tag.uncertain || false
            });
          });
        });
        
        // Batch insert tagov
        if (tagsToInsert.length > 0) {
          const values: string[] = [];
          const params: any[] = [];
          let paramIndex = 1;
          
          tagsToInsert.forEach(tag => {
            values.push(`($${paramIndex}, $${paramIndex + 1}, $${paramIndex + 2}, $${paramIndex + 3})`);
            params.push(tag.owner_id, tag.key, tag.value, tag.uncertain);
            paramIndex += 4;
          });
          
          const insertQuery = `
            INSERT INTO owner_tags (owner_id, key, value, uncertain)
            VALUES ${values.join(', ')}
          `;
          
          await client.query(insertQuery, params);
          newTagsCount += tagsToInsert.length;
        }
        
        processedCount += batch.length;
        
        // Progress log ka≈æd√Ωch 5000 z√°znamov
        if (processedCount % 5000 === 0 || processedCount === owners.length) {
          console.log(`üìà Spracovan√Ωch: ${processedCount}/${owners.length} (${Math.round(processedCount/owners.length*100)}%)`);
        }
      }
      
      console.log(`üéâ Pretagovanie dokonƒçen√©!`);
      console.log(`üìä Spracovan√Ωch vlastn√≠kov: ${processedCount}`);
      console.log(`üè∑Ô∏è Vytvoren√Ωch tagov: ${newTagsCount}`);
      
      return NextResponse.json({
        success: true,
        message: 'Pretagovanie √∫spe≈°ne dokonƒçen√©',
        stats: {
          processedOwners: processedCount,
          newTags: newTagsCount
        }
      });
      
    } finally {
      client.release();
    }
    
  } catch (error) {
    console.error('‚ùå Chyba pri pretagovan√≠:', error);
    return NextResponse.json(
      { 
        error: 'Chyba pri pretagovan√≠', 
        details: error instanceof Error ? error.message : 'Nezn√°ma chyba' 
      },
      { status: 500 }
    );
  }
}
